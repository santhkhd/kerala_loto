name: Kerala Lottery Results Updater

# Set default permissions for all jobs
permissions:
  contents: write  # Required for pushing changes
  pull-requests: write
  issues: write
  actions: read

on:
  schedule:
    # Run every 5 minutes between 3:00 PM and 4:45 PM IST (9:30-11:15 UTC)
    - cron: '0,5,10,15,20,25,30,35,40,45,50,55 9 * * *'  # 3:00 PM - 3:55 PM IST
    - cron: '0,5,10,15,20,25,30,35,40,45 10 * * *'       # 4:00 PM - 4:45 PM IST

  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  update_results:
    name: Update Lottery Results
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      has_updates: ${{ steps.update.outputs.has_updates }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install beautifulsoup4 requests pytz

      - name: Run updater script with retry
        id: update
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Function to run a command with retries
          run_with_retry() {
            local cmd=$1
            local max_retries=3
            local attempt=0
            
            while [ $attempt -lt $max_retries ]; do
              echo "Attempt $((attempt + 1)) of $max_retries - Running: $cmd"
              
              if eval "$cmd"; then
                echo "Command completed successfully"
                return 0
              else
                echo "Command failed"
                if [ $attempt -lt $((max_retries-1)) ]; then
                  echo "Waiting 2 minutes before next attempt..."
                  sleep 120  # Wait 2 minutes
                fi
                ((attempt++))
              fi
            done
            
            echo "Command failed after $max_retries attempts"
            return 1
          }
          
          # 1. Run updateloto.py to fetch new results
          if run_with_retry "python updateloto.py $GITHUB_TOKEN"; then
            echo "Found new results"
            echo "has_updates=true" >> $GITHUB_OUTPUT
          else
            echo "No new results found"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          
          # Add all changed files
          git add note/ result_manifest.json history.json
          
          # Check if there are changes to commit
          if ! git diff --quiet && ! git diff --cached --quiet; then
            git commit -m "Auto-update: New lottery results and metadata"
            git push origin HEAD:${GITHUB_REF}
            echo "Changes pushed successfully"
          else
            echo "No changes to commit"
          fi

  manifest:
    needs: update_results
    if: needs.update_results.outputs.has_updates == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Generate result_manifest.json with retry
        id: generate_manifest
        continue-on-error: true
        run: |
          MAX_RETRIES=3
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_RETRIES ]; do
            echo "Attempt $((ATTEMPT + 1)) of $MAX_RETRIES"
            
            # Generate the manifest
            node generate-manifest.js
            
            # Check if any new JSON files were added to the note directory
            if git diff --name-only --exit-code note/; then
              echo "No new JSON files found in attempt $((ATTEMPT + 1))"
              if [ $ATTEMPT -lt $((MAX_RETRIES-1)) ]; then
                echo "Waiting 5 minutes before next attempt..."
                sleep 300  # Wait 5 minutes
              fi
              ((ATTEMPT++))
            else
              echo "New JSON files found!"
              break
            fi
          done
          
          if [ $ATTEMPT -eq $MAX_RETRIES ]; then
            echo "No new JSON files found after $MAX_RETRIES attempts"
            exit 1
          fi
          
      - name: Commit and push new results and manifest
        if: steps.generate_manifest.outcome == 'success' || steps.generate_manifest.outcome == 'failure'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          git add note/*.json result_manifest.json
          git commit -m 'Auto-update results and manifest' || echo "No changes to commit"
          git push origin HEAD:${GITHUB_REF}

  history:
    needs: [update_results, manifest]
    if: (needs.update_results.outputs.has_updates == 'true' && (github.event.schedule || github.event_name == 'workflow_dispatch'))
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Generate history.json with retry
        id: generate_history
        continue-on-error: true
        run: |
          MAX_RETRIES=3
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_RETRIES ]; do
            echo "Attempt $((ATTEMPT + 1)) of $MAX_RETRIES"
            
            # Generate the history
            node generate-history.js
            
            # Check if history.json was modified
            if git diff --exit-code history.json; then
              echo "No changes to history.json in attempt $((ATTEMPT + 1))"
              if [ $ATTEMPT -lt $((MAX_RETRIES-1)) ]; then
                echo "Waiting 5 minutes before next attempt..."
                sleep 300  # Wait 5 minutes
              fi
              ((ATTEMPT++))
            else
              echo "Changes detected in history.json!"
              break
            fi
          done
          
          if [ $ATTEMPT -eq $MAX_RETRIES ]; then
            echo "No changes detected after $MAX_RETRIES attempts"
            exit 1
          fi
          
      - name: Commit and push history
        if: steps.generate_history.outcome == 'success' || steps.generate_history.outcome == 'failure'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          git add history.json
          git commit -m 'Auto-update history.json' || echo "No changes to commit"
          git push origin HEAD:${GITHUB_REF}
